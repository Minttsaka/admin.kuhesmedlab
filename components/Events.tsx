/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/0ZAbwKSPV4X
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState } from "react"
import { Input } from "./ui/input"
import { format, } from "date-fns"
import { Calendar as CalendarIcon, Clock, ImageIcon, Trash2, VideoIcon } from "lucide-react"
import { DateRange } from "react-day-picker"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Calendar } from "@/components/ui/calendar"
import ReactQuill from "react-quill";
import "react-quill/dist/quill.bubble.css";
import { formats, modules } from "@/lib/quillModules";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover"
import useSWR from "swr"
import { z } from "zod"
import axios from "axios"
import { Event } from "@prisma/client"
import { Badge } from "./ui/badge"
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"
import { motion,} from 'framer-motion'
import { useToast } from "./ui/use-toast"

const FormSchema = z.object({
  title: z.string(),
  location: z.string(),
  description:z.string()
});

const fetcher = async (url:string) => {
  const res = await axios.get(url);
  return res.data;
};

export default function Events() {

  const [value, setValue] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [date, setDate] = useState<DateRange | undefined>()
  const [newEvent, setNewEvent] = useState<Partial<Event>>({})

  const { toast } = useToast()

  const { data, mutate, isLoading } = useSWR<Event[]>(
    `/api/event`,
    fetcher
  );

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    setNewEvent({ ...newEvent, [e.target.name]: e.target.value })
  }

  const handleDateChange = (date: DateRange | undefined) => {
    if (date) {
      setNewEvent(prevEvent => ({
        ...prevEvent,
        startDate: date.from,
        endDate: date.to
      }));
      setDate(date)
    }
  };

  const handleSaveEvent = async() => {

    if (newEvent.title && newEvent.startDate && newEvent.endDate && newEvent.startTime && newEvent.startTime && value) {
      const eventToSave = {
        ...newEvent,
        description:value
      } as Event
      setIsSubmitting(true)
      await axios.post('/api/event',{
        ...eventToSave
      })
      mutate()
  
      toast({
        title: "Event Saved",
        description: "Your event has been successfully created.",
      })
      setIsSubmitting(false)
    } else {
      toast({
        title: "Incomplete Event Details",
        description: "Please fill in all required fields.",
        variant: "destructive",
      })
    }
  }

  const handleDeleteEvent = async(id: string) => {

    await axios.get(`/api/event/${id}`)
    mutate()

    toast({
      title: "Event Deleted",
      description: "The event has been removed from the dashboard.",
    })
  }

  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (file) {
      const reader = new FileReader()
      reader.onloadend = () => {
        setNewEvent({ ...newEvent, img: reader.result as string })
      }
      reader.readAsDataURL(file)
    }
  }

  return (
    <div className="flex flex-col bg-white p-6 m-6 rounded-2xl">
      <div className="flex-1 grid grid-cols-1 md:grid-cols-2 gap-1 p-6">
        <div className="bg-white p-6">
          <h2 className="text-xl font-bold mb-4">Create New Event</h2>
          <div className="bg-gray-100 p-6 rounded-2xl" >
            <div className="mb-4">
              <label htmlFor="title" className="block font-medium mb-1">
                Event Title
              </label>
              <Input
                type="text"
                id="title"
                name="title"
                value={newEvent.title || ''}
                onChange={handleInputChange}
                className="w-full  rounded-md bg-white"
                required
              />
            </div>
            <div className="mb-4 grid grid-cols-2 items-center sgap-4">
              <div>
                <label htmlFor="date" className="block font-medium mb-1">
                  Date
                </label>
                <Popover>
                  <PopoverTrigger className="bg-white w-full" asChild>
                    <Button
                      id="date"
                      variant={"outline"}
                      className={cn(
                        "w-[300px] justify-start text-left font-normal",
                        !date && "text-muted-foreground"
                      )}
                    >
                      <CalendarIcon className="mr-2 h-4 w-4" />
                      {date?.from ? (
                        date.to ? (
                          <>
                            {format(date.from, "LLL dd, y")} -{" "}
                            {format(date.to, "LLL dd, y")}
                          </>
                        ) : (
                          format(date.from, "LLL dd, y")
                        )
                      ) : (
                        <span>Pick a date</span>
                      )}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0 bg-white" align="start">
                    <Calendar
                      initialFocus
                      mode="range"
                      defaultMonth={date?.from}
                      selected={date}
                      onSelect={handleDateChange}
                      numberOfMonths={2}
                      disabled={(date) =>
                        date < new Date() || date < new Date("1900-01-01")
                      }
                      //initialFocus
                    />
                  </PopoverContent>
                </Popover>
              </div>
              <div className="flex gap-2 items-center">
                <div className="block">
                  <label className="block font-medium mb-1" htmlFor="startTime">Select Start Time:</label>
                  <input
                    type="time"
                    name="startTime"
                    id="startTime"
                    value={newEvent.title || ''}
                    onChange={handleInputChange}
                  />
                </div>
              </div>
            </div>
            <div className="mb-4">
              <label htmlFor="location" className="block font-medium mb-1">
                Location
              </label>
              <Input
                type="text"
                id="location"
                name="location"
                className="w-full bg-white"
                value={newEvent.location || ''}
                onChange={handleInputChange}
                required
              />
            </div>
            <div className="mb-4">
              <label htmlFor="description" className="block font-medium mb-1">
                Description
              </label>
              <ReactQuill
                className="h-[30vh] z-50 bg-gray-100  mx-2 placeholder:text-2xl outline-none"
                theme="bubble"
                modules={modules}
                formats={formats}
                value={value}
                onChange={setValue}
                placeholder="Tell your story..."
              />
            </div>
            <div className="mb-4">
            <div className="m-2 flex items-center justify-between ">
                  <Input
                    type="file"
                    id="image"
                    onChange={handleImageUpload}
                    style={{ display: "none" }}
                    accept="image/*"
                  />
                  <div className='flex bg-white shadow p-1 gap-5'>
                    <label htmlFor="image">
                    <ImageIcon className='text-blue-500 h-6 w-6 cursor-pointer  rounded-full'  />
                    </label>
                    <label htmlFor="video">
                      <VideoIcon className='text-blue-500 h-6 w-6 cursor-pointer  rounded-full' />
                    </label>
                   
                  </div>
                </div>
            </div>
            <Button
              type="submit"
              onClick={handleSaveEvent}
              disabled={isSubmitting}
              className="bg-[purple] text-white w-full py-2 px-4 rounded-md hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"
            >
              Create Event
            </Button>
          </div>
        </div>
          <img className="h-fit w-full rounded-2xl shadow-2xl shadow-black" src={newEvent.img ?? "https://images.unsplash.com/photo-1429962714451-bb934ecdc4ec?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"} /> 
      </div>
      <div className="grid grid-cols-2 gap-1 mx-6 text-xs">
        <div className=" p-6">
          <Badge className="bg-[red] mb-5 text-white">Past Events</Badge>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {data?.filter((event:Event) => new Date(event.startDate) < new Date()).map((event) => (
              <motion.div
                key={event.id}
                initial={{ opacity: 0, scale: 0.8 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.8 }}
                transition={{ duration: 0.3 }}
              >
                <Card className="overflow-hidden">
                  <CardHeader className="p-0">
                    <div className="relative h-48 w-full">
                      {event.img ? (
                        <img src={event.img} alt={event.title} className="object-cover w-full h-full" />
                      ) : (
                        <div className="flex items-center justify-center w-full h-full bg-gray-200">
                          <ImageIcon className="h-12 w-12 text-gray-400" />
                        </div>
                      )}
                      <Button
                        variant="destructive"
                        size="icon"
                        className="absolute top-2 right-2"
                        onClick={() => handleDeleteEvent(event.id)}
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  </CardHeader>
                  <CardContent className="p-4">
                    <CardTitle>{event.title}</CardTitle>
                    <CardDescription className="mt-2 line-clamp-2">
                      <div dangerouslySetInnerHTML={{ __html:event.description }}/>
                      </CardDescription>
                  </CardContent>
                  <CardFooter className="flex flex-col items-start p-4 bg-gray-50">
                    <div className="flex items-center text-sm text-gray-500 mb-1">
                      <CalendarIcon className="mr-2 h-4 w-4" />
                      {format(event.startDate, "PPP")} - {format(event.endDate, "PPP")}
                    </div>
                    <div className="flex items-center text-sm text-gray-500">
                      <Clock className="mr-2 h-4 w-4" />
                      {event.startTime}
                    </div>
                  </CardFooter>
                </Card>
              </motion.div>
            ))}

          </div>
        </div>
        <div className=" p-6">
          <Badge className="bg-[green] mb-5 text-white">Upcoming Events</Badge>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {data?.filter((event:Event) => new Date(event.startDate) > new Date()).map((event) => (
              <motion.div
                key={event.id}
                initial={{ opacity: 0, scale: 0.8 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.8 }}
                transition={{ duration: 0.3 }}
              >
                <Card className="overflow-hidden">
                  <CardHeader className="p-0">
                    <div className="relative h-48 w-full">
                      {event.img ? (
                        <img src={event.img} alt={event.title} className="object-cover w-full h-full" />
                      ) : (
                        <div className="flex items-center justify-center w-full h-full bg-gray-200">
                          <ImageIcon className="h-12 w-12 text-gray-400" />
                        </div>
                      )}
                      <Button
                        variant="destructive"
                        size="icon"
                        className="absolute top-2 right-2"
                        onClick={() => handleDeleteEvent(event.id)}
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  </CardHeader>
                  <CardContent className="p-4">
                    <CardTitle>{event.title}</CardTitle>
                    <CardDescription className="mt-2 line-clamp-2">
                      <div dangerouslySetInnerHTML={{ __html:event.description }} />
                    </CardDescription>
                  </CardContent>
                  <CardFooter className="flex flex-col items-start p-4 bg-gray-50">
                    <div className="flex items-center text-sm text-gray-500 mb-1">
                      <CalendarIcon className="mr-2 h-4 w-4" />
                      {format(event.startDate, "PPP")} - {format(event.endDate, "PPP")}
                    </div>
                    <div className="flex items-center text-sm text-gray-500">
                      <Clock className="mr-2 h-4 w-4" />
                      {event.startTime}
                    </div>
                  </CardFooter>
                </Card>
              </motion.div>
            ))}
          </div>
        </div>

        </div>
    </div>
  )
}
